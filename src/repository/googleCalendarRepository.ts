import { calendar_v3 } from 'googleapis';
import { DateTime, Event } from '../entity';
import { IGoogleCalendarRepository } from '../usecase/cybozu2gcal';

export type ICalendarDriver = {
  list(timeMin: string, timeMax: string): Promise<calendar_v3.Schema$Event[]>;
  insert(event: calendar_v3.Schema$Event): Promise<void>;
  delete(eventId: string): Promise<void>;
};

const entityEventFrom = ({ start, end, ...rest }: calendar_v3.Schema$Event): Event | undefined => {
  if (rest.description?.indexOf('This event was generated by cybozu2gcal.') !== 0) return;

  const match = rest.description?.match(/UID:([0-9]+)/);
  const id = match?.[1] || '';
  const googleEventId = rest.id || '';
  const title = rest.summary || '';

  if (start?.dateTime && end?.dateTime) {
    const startedAt = new DateTime(start.dateTime);
    const endedAt = new DateTime(end.dateTime);
    return { id, type: 'dateTime', googleEventId, title, startedAt, endedAt };
  } else {
    const startedAt = new DateTime(start?.date || '');
    const endedAt = new DateTime(end?.date || '');
    return { id, type: 'date', googleEventId, title, startedAt, endedAt };
  }
};

const googleCalendarEventFrom = ({ id, type, title, startedAt, endedAt }: Event) => {
  const summary = title;
  const description = `This event was generated by cybozu2gcal.

UID:${id}`;
  if (type === 'dateTime') {
    const start = { dateTime: startedAt.format() };
    const end = { dateTime: endedAt.format() };
    return { summary, description, start, end };
  } else {
    const start = { date: startedAt.format('YYYY-MM-DD') };
    const end = { date: endedAt.format('YYYY-MM-DD') };
    return { summary, description, start, end };
  }
};

const wait = (ms: number) => {
  return new Promise((resolve) => setTimeout(resolve, ms));
};

const serialize = async (promises: (() => Promise<void>)[]) => {
  for (const promise of promises) {
    await wait(100); // 100 milli second.
    await promise();
  }
};

export class GoogleCalendarRepository implements IGoogleCalendarRepository {
  private driver: ICalendarDriver;

  constructor(calendarDriver: ICalendarDriver) {
    this.driver = calendarDriver;
  }

  list = async (timeMin: string, timeMax: string): Promise<Event[]> => {
    const events = await this.driver.list(timeMin, timeMax);

    return events.map(entityEventFrom).filter<Event>((e): e is Event => !!e);
  };

  addEvents = async (events: Event[]): Promise<void> => {
    const promises = events.map((event) => () => this.driver.insert(googleCalendarEventFrom(event)));

    await serialize(promises);
  };

  deleteEvents = async (events: Event[]): Promise<void> => {
    const promises = events.map(({ googleEventId }) => () => this.driver.delete(googleEventId || ''));

    await serialize(promises);
  };
}
