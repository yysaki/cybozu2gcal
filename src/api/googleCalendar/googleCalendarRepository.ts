import { calendar_v3 } from 'googleapis';
import { Event } from '../../entity';
import { dayjs, tz } from '../../lib';
import { IGoogleCalendarRepository } from '../../usecase/cybozu2gcal';
import { CalendarDriver } from './';

export class GoogleCalendarRepository implements IGoogleCalendarRepository {
  private driver: ReturnType<CalendarDriver>;

  constructor(calendarDriver: CalendarDriver) {
    this.driver = calendarDriver();
  }

  async list(timeMin: string, timeMax: string): Promise<Event[]> {
    const events = await this.driver.list(timeMin, timeMax);

    return events.map(this.entityEventFrom).filter<Event>((e): e is Event => !!e);
  }

  async addEvents(events: Event[]): Promise<void> {
    const promises = events.map((event) => () => this.driver.insert(this.googleCalendarEventFrom(event)));

    await this.serialize(promises);
  }

  async deleteEvents(events: Event[]): Promise<void> {
    const promises = events.map(({ googleEventId }) => () => this.driver.delete(googleEventId || ''));

    await this.serialize(promises);
  }

  private entityEventFrom({ start, end, ...rest }: calendar_v3.Schema$Event): Event | undefined {
    if (rest.description?.indexOf('This event was generated by cybozu2gcal.') !== 0) return;

    const match = rest.description?.match(/UID:([0-9]+)/);
    const id = match?.[1] || '';
    const googleEventId = rest.id || '';
    const title = rest.summary || '';

    if (start?.dateTime && end?.dateTime) {
      const startedAt = dayjs(start.dateTime);
      const endedAt = dayjs(end.dateTime);
      return { id, type: 'dateTime', googleEventId, title, startedAt, endedAt };
    } else {
      const startedAt = tz(start?.date || '');
      const endedAt = tz(end?.date || '');
      return { id, type: 'date', googleEventId, title, startedAt, endedAt };
    }
  }

  private googleCalendarEventFrom({ id, type, title, startedAt, endedAt }: Event): calendar_v3.Schema$Event {
    const summary = title;
    const description = `This event was generated by cybozu2gcal.

UID:${id}`;
    if (type === 'dateTime') {
      const start = { dateTime: startedAt.format() };
      const end = { dateTime: endedAt.format() };
      return { summary, description, start, end };
    } else {
      const start = { date: startedAt.format('YYYY-MM-DD') };
      const end = { date: endedAt.format('YYYY-MM-DD') };
      return { summary, description, start, end };
    }
  }

  private wait(ms: number) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  private async serialize(promises: (() => Promise<void>)[]) {
    for (const promise of promises) {
      await this.wait(100); // 100 milli second.
      await promise();
    }
  }
}
